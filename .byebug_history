c
d
c
:body=>json_string,
:headers=>{"Content-Type"=>"application/json"})response=TriResultsWS.put("/api/races/#{race.id}",
:body=>json_string,
:headers=>{"Content-Type"=>"application/json"})response=TriResultsWS.put("/api/races/#{race.id}",
:body=>json_string,
:headers=>{"Content-Type"=>"application/json"})response=TriResultsWS.put("/api/races/#{race.id}",
:body=>json_string,
:headers=>{"Content-Type"=>"application/json"})response=TriResultsWS.put("/api/races/#{race.id}",
:body=>json_string,
response=TriResultsWS.put("/api/races/#{race.id}",
c
data["_id"]
data
data = JSON.parse(page.body)
test_race.name
q
js=JSON.parse(page.body)
page.body
test_race.name
c
bdata
bdata.is_a?(Hash)
bdata.is_a?(Array)
bdata[:n]
bdata["n"]
bdata["date"]
bdata["date"
bdate["date"]
bdata
bdata["date"]
bdata.date
body_data.date
body_data[:date]
body_data["date"]
test_race.date
bdata=JSON.parse(page.body)
page.body
c
n
race.name
race.nil?
n
race1.class
race1.nil?
race1.id
race1.date
race1.name
puts race1
pp race1
race1=Race.where(:_id=>params[:id])
c
params[:race].class
race=Race.create(params[:race])
n
params[:race]
quit
c
exit
reload!
c
n
puts e.race
puts e
n
c
n
object
n
object
c
object
c
exit
n
step
n
step
object
n
step
c
n
object
n
object
n
object
n
name
action
n
object
n
object
c
exit
units
:units
c
n
s
n
object.hash
c
n
Hash.true?
Hash
n
